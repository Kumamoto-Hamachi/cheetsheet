AWS cheetsheet

"""
VPC,EC2,RDS
セキュリティグループ


インスタンスを起動して、そこにソフト(Apacheなど)をyumでインストール、systemctl enableで自動起動の設定にした
ここで疑問なのがこのインスタンスを終了した場合、このインストールや設定等は再起動したときに受け継がれるのか？
AMIの設定が反映されることはわかっている

yum list installed | grep httpd
@amzn-coreとでるがなぜ？

#練習用システム
	#システム構成
		パブリックサブネット(Web:WordPress,Apache,OS)、プライベートサブネット(DB:MySQL, OS)
"""

# AWSの概要
	AWSクラウドサービス/豊富なサービス/リソースが柔軟/従量課金
	#マネジメントコンソール
		ログイン後に表示されるAWSの管理画面
	
#IAMで作業用ユーザーの作成
	#ルートユーザー
		そのアカウントの全てのAWSサービスとAWSリソース全てに完全なアクセス権を持つユーザー
		アカウントの変更・解約・サポートプランの変更のみに利用すべき
		
	#作業用ユーザー(IAMユーザー)
		AWSで作成するユーザー、認証情報とアクセス許可の権限を個別に変更できる
		通常の作業はIAMユーザーで！
		
	#IAMユーザーでも請求情報へアクセス出来るようにする
		ルートユーザーで[マイアカウント]、[IAMユーザー/ロールによる請求情報へのアクセス]
		
	#IAMでユーザー追加
		[サービス検索:IAM] [ユーザーを追加] # Desktop/AWSを確認
		AWSアクセスの種類(PGかmanagement console) ユーザーへのアクセス許可(厳しめがよろしい) タグの設定(そのユーザーの役割情報を付与)

#AWSのネットワーク基礎概念
	リージョン選択(跨っては無理)→アベイラビリティゾーン選択(跨がりok)→VPC作成→サブネットで区切る
	#リージョン
		AWSの各サービスが提供されている地域のこと、リージョンごとに使えるサービスが違う
		
	#アベイラビリティゾーン
		独立したデータセンターのこと、複数のアベイラビリティゾーンがリージョン下にある。
		
	#VPC(Virtual Private Cloud)
		AWS上に仮想ネットワークを作成できるサービス
		
	#サブネット
		VPCを細かく区切ったネットワーク
		(ユーザーから可視/不可視を分けたり)(複数のアベイラビリティゾーンにサブネットをつけて災害に強い冗長性のあるシステムを構成)

#仮想ネットワーク VPCの作成
	#VPCを作成する
		IAMユーザーでログイン、メニューからリージョンを選択、サービス検索：VPC、[VPCのダッシュボードから]VPCの作成、
		TODO IPv4 CIDR ブロック* サイダー 10.0.0.0/16
		
	#パブリックサブネットを作成する
		[VPCのダッシュボードから]名前タグ、VPC、アベイラビリティゾーン、IPv4 CIDRブロック 10,0.0.0/24
		#IP/ネットワーク部/ホスト部/サイダーとは
			https://twitter.com/digitalhimiko/status/1234815847220170754?s=20
			https://xtech.nikkei.com/atcl/nxt/column/18/00780/052700002/?SS=imgview&FD=61504692
			
	#ルーティングを設定する
		#インターネットゲートウェイを作成しVPCにアタッチする
			インターネットゲートウェイとはVPCとネットを接続する仮想のルーター
			[VPCダッシュボード]インターネットゲートウェイの作成、VPCにアタッチ、
		#ルートテーブルを作成し、パブリックサブネットに紐付けする
			ルートテーブルとはルーターが管理している情報(どのIPがどのデバイスと紐付いているか、どのネットワークに所属しているか)
			自分のIP以外からのアクセスは全てインターネットゲートウェイに振り分ける設定にしてやる(AWSでは暗黙的に設定される？)、これでネットに繋がる！
			[VPCダッシュボード]ルートテーブル作成、サブネットの関連づけ、ルートの編集、ルートの追加(0.0.0.0/0 igwへターゲットを振り分け)
		
		
#Webサーバー EC2の構築
	#EC2
		EC2(Elastic Compute Cloud)、AWSクラウド上の仮想サーバー
		https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/concepts.html	
		#AMI(Amazon machine image)Amazonマシンイメージ
			「AMI」はインスタンスの起動に必要な情報が入ったOSのイメージ/サーバーのソフト構成(OS,APサーバー、AP)のテンプレート
			「インスタンス」とは、クラウドの仮想サーバーです。起動時の設定は、インスタンスを起動した際に指定した AMI のコピーです。
			https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html
		#インスタンスタイプ
			サーバーのスペックを定義したもの。インスタンスタイプによりCPU、メモリ、ストレージ、ネットワーク帯域が異なる
		#ストレージ
			サーバーにくっつけるデータの保存場所、恒久的なEBS(Elastic Book Store)を使用することが多い(インスタンスストアは一時的)
	
	#EC2インスタンスを作成
		#EC2インスタンスを作成
			[EC2ダッシュボード]インスタンスの作成、AMIを選択、インスタンスタイプを選択、詳細設定(ネットワーク、サブネット、自動割り当てパブリックIP有効、キャパシティの予約なし)、ストレージの追加、タグの追加(キー、値)、セキュリティグループの設定
			「自動割り当てパブリックIP」はインターネットから直接アクセス出来るIPを割り当てするかどうか。
			「キャパシティの予約」とはインスタンスの空きがなくなった時の火急の事態に対応
			「キーペア」とはEC2インスタンスにログインするのに必要な鍵
		#セキュリティグループを設定(HTTP通信のみはアクセス出来るようにファイアウォールに穴を開ける作業が必要)
			インターネットに接続するために必要。
			[EC2ダッシュボード]インバウンド編集、追加、ソース
			TODO ポートrange
		#SSHでEC2インスタンスに接続(Mac)
			#キーペアの読み書き権限をオーナー以外が使えないように制限
				~$ chmod 600 ~/Desktop/[keypair名].pem
			[EC2ダッシュボード]インスタンス、IPv4パブリックIPコピー、
			#ssh接続
				~$ ssh -i ~/Desktop/[keypair名].pem ec2-user@[インスタンスのところからコピペしたIP]、exitで接続終了
				参考 https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html
				@の前のユーザー名は以下の通り
				・Amazon Linux 2 または Amazon Linux AMI の場合は、ユーザー名は ec2-user です。
				・CentOS AMI の場合、ユーザー名は centos です。
				・Debian AMI の場合は、ユーザー名は admin または root です。
				・Fedora AMI の場合、ユーザー名は ec2-user または fedora です。
				・RHEL AMI の場合は、ユーザー名は ec2-user または root のどちらかです。
				・SUSE AMI の場合は、ユーザー名は ec2-user または root のどちらかです。
				・Ubuntu AMI の場合は、ユーザー名は ubuntu です。
				参考 https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/connection-prereqs.html
		#Apacheをインストール
			#yumをアップデートする
				sudo yum update -y
				「yum」とはパッケージの統合管理システムのこと。RPMパッケージをかんりするもので、rpmコマンドを使うより便利。
			#Apacheをインストールする
				sudo yum -y install httpd
			#Apacheを起動させる
				systemctl start httpd.service
			#Apacheを(サーバー起動時に)自動起動させる

#DBサーバー RDSの構築
	#RDS
		フルマネージドなリレーショナルデータベースサービス
		#オンプレ、EC2との比較
			オンプレ：アプリ最適化、スケーリング、バックアップ、アップデート、OSインストール、物理サーバー設置
			on EC2：アプリ最適化、スケーリング、バックアップ、アップデート(ただの仮想サーバーなのでDBサーバーに出来る)
			RDS   ：アプリ最適化
			(AWSエンジニアによるベストプラクティスを使えるので)RDSは構築も運用も楽！
			高い可用性/パフォーマンス向上/運用負荷の軽減
			MySQL/PostgreSQL/Oracle/Microsoft SQL Server/Amazon Aurora/MariaDB
			
	#プライベートサブネットを作成する
		プライベートサブネットはネットと繋がらないのでigwの設定はしない
		RDSは異なるアベイラビリティゾーンに複数のインスタンスを作る必要があるので複数のプライベートサブネットが必要
		
		
